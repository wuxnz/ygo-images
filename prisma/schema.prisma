// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Tournament relationships
    createdTournaments Tournament[]
    tournamentParticipants TournamentParticipant[]
    tournamentResults TournamentResult[]
    
    // Team relationships
    ownedTeams Team[]
    teamMemberships TeamMember[]
    
    // Deck relationships
    decks Deck[]
    
    // Notification relationships
    notifications Notification[]
    notificationPreferences NotificationPreference?
    
    // Follow relationships
    following Follow[] @relation("UserFollowing")
    followers Follow[] @relation("UserFollowers")
    
    // Tournament match relationships
    player1Matches TournamentMatch[] @relation("Player1")
    player2Matches TournamentMatch[] @relation("Player2")
    wonMatches TournamentMatch[] @relation("Winner")
    
    // Notification system relationships
    notificationBatches NotificationBatch[]
    
    // Team ban relationships
    bannedFromTeams BannedUser[]
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tournament {
    id          String   @id @default(cuid()) @map("_id")
    name        String
    description String?
    format      String   // "swiss", "round-robin", "single-elimination"
    maxPlayers  Int
    status      String   @default("upcoming") // "upcoming", "active", "completed"
    startDate   DateTime
    endDate     DateTime?
    prize       String?
    
    creatorId   String
    creator     User? @relation(fields: [creatorId], references: [id])
    
    participants TournamentParticipant[]
    rounds       TournamentRound[]
    results      TournamentResult[]
    
    // Team tournament support
    teamSize     Int?     // Number of players per team (null for individual tournaments)
    teams        TournamentTeam[]
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model TournamentParticipant {
    id           String @id @default(cuid()) @map("_id")
    tournamentId String
    tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
    
    userId       String
    user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    deckId       String?
    deck         Deck? @relation(fields: [deckId], references: [id])
    
    status       String @default("registered") // "registered", "checked-in", "dropped"
    
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    
    @@unique([tournamentId, userId])
}

model TournamentRound {
    id           String @id @default(cuid()) @map("_id")
    tournamentId String
    tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
    
    roundNumber  Int
    status       String @default("pending") // "pending", "active", "completed"
    
    matches      TournamentMatch[]
    
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model TournamentMatch {
    id       String @id @default(cuid()) @map("_id")
    roundId  String
    round    TournamentRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
    
    player1Id String
    player1   User @relation("Player1", fields: [player1Id], references: [id])
    
    player2Id String
    player2   User @relation("Player2", fields: [player2Id], references: [id])
    
    winnerId  String?
    winner    User? @relation("Winner", fields: [winnerId], references: [id])
    
    tableNumber Int?
    
    createdAt   DateTime? @default(now())
    updatedAt   DateTime @updatedAt
}

model TournamentResult {
    id           String @id @default(cuid()) @map("_id")
    tournamentId String
    tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
    
    userId       String
    user         User @relation(fields: [userId], references: [id])
    
    placement    Int
    points       Int?
    wins         Int @default(0)
    losses       Int @default(0)
    draws        Int @default(0)
    
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    
    @@unique([tournamentId, userId])
}

model Team {
    id          String   @id @default(cuid()) @map("_id")
    name        String
    description String?
    code        String   @unique
    
    ownerId     String
    owner       User @relation(fields: [ownerId], references: [id])
    
    members     TeamMember[]
    decks       Deck[]
    
    tournamentTeams TournamentTeam[]
    bannedUsers BannedUser[]
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model TeamMember {
    id     String @id @default(cuid()) @map("_id")
    teamId String
    team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    
    userId String
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    role   String @default("member") // "member", "leader"
    deckId String?
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@unique([teamId, userId])
}

model TournamentTeam {
    id           String @id @default(cuid()) @map("_id")
    tournamentId String
    tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
    
    teamId       String
    team         Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    
    createdAt    DateTime @default(now())
    
    @@unique([tournamentId, teamId])
}

model BannedUser {
    id     String @id @default(cuid()) @map("_id")
    teamId String
    team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    
    userId String
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    createdAt DateTime @default(now())
    
    @@unique([teamId, userId])
}

model Deck {
    id          String   @id @default(cuid()) @map("_id")
    name        String
    description String?
    format      String   // "standard", "expanded", "unlimited"
    
    userId      String
    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    teamId      String?
    team        Team? @relation(fields: [teamId], references: [id])
    
    fileUrl     String
    fileName    String
    fileSize    Int
    uploadedAt  DateTime @default(now())
    
    cards       DeckCard[]
    
    tournamentParticipants TournamentParticipant[]
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model DeckCard {
    id      String @id @default(cuid()) @map("_id")
    deckId  String
    deck    Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)
    
    cardId  String
    count   Int @default(1)
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Follow {
    id          String @id @default(cuid()) @map("_id")
    followerId  String
    follower    User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
    
    followingId String
    following   User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
    
    createdAt   DateTime @default(now())
    
    @@unique([followerId, followingId])
}

// Notification System Models
model Notification {
    id        String   @id @default(cuid()) @map("_id")
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    type      String   // Notification type enum
    title     String
    message   String
    data      String?  // JSON string for additional metadata
    
    read      Boolean  @default(false)
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@index([userId])
    @@index([read])
    @@index([createdAt])
}

model NotificationPreference {
    id        String   @id @default(cuid()) @map("_id")
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    email     Boolean  @default(true)
    push      Boolean  @default(true)
    inApp     Boolean  @default(true)
    
    // Notification type preferences as comma-separated string
    enabledTypes String @default("TOURNAMENT_CREATED,TOURNAMENT_JOINED,TOURNAMENT_STARTED,TEAM_JOINED,DECK_CREATED")
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model NotificationBatch {
    id        String   @id @default(cuid()) @map("_id")
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    type      String
    count     Int      @default(1)
    lastEvent DateTime @default(now())
    processed Boolean  @default(false)
    
    createdAt DateTime @default(now())
    
    @@unique([userId, type])
    @@index([userId, processed])
}
